5th feb
********
Verison
build
patch
hot-fix
fix-pack
release


build time should be number--> major version.minor version.patch.build number
once build is done we need to assign a version no--> version is enhancement of build --> so, we need to keep track of version
patch-->minor modification/rectification given to build by developer to fix the erorrs in the test
hot fix-->  suppose we have severe bugs/ production bugs, they need to be fixed
fix pack--> often release of updated version
release --> process of moving build/final project to live environment

types of vcs:
-->Central - SVN
--> Distributed - GIT



git --> tool/software helps in trcaking code, i.e VCS
github --> app/web platform where we have repositories to keep our built code


branch --> linear development of the code   

Soft Code Freeze:

During a soft code freeze, developers are encouraged to limit non-essential changes to the codebase.
Typically, this means that only critical bug fixes or changes directly related to the stability of the software are allowed.
New features or significant code refactoring may be postponed until after the soft freeze period

Hard Code Freeze:

A hard code freeze imposes stricter limitations on making changes to the codebase.
During a hard freeze, developers are usually prohibited from making any changes to the code except for critical bug fixes or emergency patches.


Each Git object is identified by its SHA-1 hash, which is a cryptographic hash computed based on the content of the object. This ensures that identical content always results in the same hash value.git objects??? 
SHA-1 is indeed used by Git as part of its internal data structure. Git uses SHA-1 hashes to uniquely identify objects within its repository, including commits, trees, and blobs (file contents).

git log arguments???

what is HEAD? SHA1 algorithm? <-- how this git track the commits

HEAD--> pointer pointuing to the commit id of the current branch

alb-rjay-1566451115.ap-south-1.elb.amazonaws.com


************************************************************
6th Feb
******

diff ls and git ls-files?

ls --> lists all the files in the directory

git ls-files -->list all the files in the repo that GIt is currently tracking

how to crete feature branch without pulling code from main?


fast forward, recursive, octopus merge
find last(very first commit) commit id of my branch  --> git log --format=%H | TAIL 1

****************************************************************************************
7th feb
*****
git branch bugfix/abc-pqr   bugfix - branch, abc-project, pqr-module

gti branch b_name commit id --> craetes branch with specific commit id


zombie, orphan, daemon process?????

HEAD, origin, commit id - diff
HEAD is a reference to the currently checked out commit in your local repository.
head typically points to the latest commit

origin is the default name given to the remote repository from which you cloned your local repository.
It serves as a shorthand name for the remote repository's URL

a commit ID is a unique identifier for a specific commit in the repository.

what is credential.helper=manager in git config-->
Configurational setting in git, specifies the credential helper to use for storing
and retreiving credentials.
Git uses credential manager as credential helper. credential manager is a tool manages 
authentication credentails securely

how to change in it default branch in git config??

To change the default branch in your Git configuration, you need to update the init.defaultBranch setting.
we can do it using the git config command:
git config --global init.defaultBranch <new_default_branch_name>



************************************************************************************************************
9th feb
********
git name-rev --name-only commit-id --> display bracnh name with commit id as i/p

to display only curretn bracnh

.git /HEAD is a regular file whose content is ref: refs/heads/master

gti symbolic-ref --short HEAD --> to display only current branch


how to find ancestor commit of all branches?
git merge-base finds the best common ancestor(s) between two commits to use in a three-way merge. One common ancestor is better than another common ancestor if the latter is an ancestor of the former. A common ancestor that does not have any better common ancestor is a best common ancestor, i.e. a merge base. Note that there can be more than one merge base for a pair of commits.


git merger-base --octopus branch-name1 branch-name2 ....




git tagging***

we add git tags to code for release

whenever a new tag is created, we need to create a jenkin job for deployment.



*****************************************************************************************************************************
16th feb

code commit service in aws which is like GITHUB

Manager, custom, ??? policies in IAM ploicies


Dry run --?? DRy Dont Repeat Yourself






















